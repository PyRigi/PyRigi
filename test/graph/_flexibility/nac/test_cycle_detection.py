from typing import cast

import networkx as nx
import pytest

import pyrigi.graphDB as graphs
from pyrigi.graph._flexibility import nac
from pyrigi.graph._flexibility.nac.cycle_detection import \
    _find_useful_cycles_for_class
from pyrigi.graph.graph import Graph


@pytest.mark.parametrize(
    ("graph", "result"),
    [
        (
            graphs.Path(3),
            {},
        ),
        (
            graphs.Cycle(3),
            {},
        ),
        (
            graphs.Cycle(4),
            {i: {(0, 1, 3, 2)} for i in range(4)},
        ),
        (
            graphs.Cycle(5),
            {i: {(0, 1, 4, 3, 2)} for i in range(5)},
        ),
        (
            graphs.Diamond(),
            {},
        ),
        (
            graphs.ThreePrism(),
            {
                0: {(0, 1, 4, 3), (0, 2, 4, 3), (0, 1, 4, 2)},
                1: {(0, 1, 4, 3), (0, 1, 4, 2)},
                2: {(0, 2, 4, 3), (0, 1, 4, 2)},
                3: {(0, 1, 4, 3), (0, 2, 4, 3)},
                4: {(0, 1, 4, 3), (0, 2, 4, 3), (0, 1, 4, 2)},
            },
        ),
        (
            graphs.ThreePrismPlusEdge(),
            {},
        ),
        (
            graphs.DiamondWithZeroExtension(),
            {},
        ),
        (
            Graph.from_vertices_and_edges(
                list(range(8)),
                [(0, 1), (0, 5), (1, 3), (1, 7), (2, 3), (2, 4)]
                + [(3, 7), (4, 5), (4, 6), (5, 6), (6, 7)],
            ),
            {
                0: {(0, 1, 5, 6, 2)},
                1: {(0, 1, 5, 6, 2)},
                2: {(0, 1, 5, 6, 2), (2, 3, 4, 5, 6)},
                3: {(2, 3, 4, 5, 6)},
                4: {(2, 3, 4, 5, 6)},
                5: {(0, 1, 5, 6, 2), (2, 3, 4, 5, 6)},
                6: {(0, 1, 5, 6, 2), (2, 3, 4, 5, 6)},
            },
        ),
        (
            Graph.from_vertices_and_edges(
                list(range(11)),
                [(0, 1), (0, 5), (1, 6), (2, 3), (2, 4), (3, 5), (3, 8)]
                + [(3, 10), (4, 6), (4, 7), (4, 9), (5, 8), (5, 10), (6, 7)]
                + [(6, 9), (7, 8), (7, 9), (8, 10), (9, 10)],
            ),
            {
                3: {(3, 4, 6, 8, 5), (3, 4, 6, 7, 5)},
                4: {(3, 4, 6, 8, 5), (3, 4, 6, 7, 5)},
                5: {(3, 4, 6, 7, 5), (3, 4, 6, 8, 5), (5, 7, 6, 8)},
                6: {(3, 4, 6, 7, 5), (3, 4, 6, 8, 5), (5, 7, 6, 8)},
                7: {(3, 4, 6, 7, 5), (5, 7, 6, 8)},
                8: {(5, 7, 6, 8), (3, 4, 6, 8, 5)},
            },
        ),
        (
            Graph.from_vertices_and_edges(
                list(range(15)),
                [(0, 1), (0, 5), (0, 9), (1, 3), (1, 5), (1, 10), (1, 12)]
                + [(2, 10), (3, 4), (3, 5), (3, 7), (3, 9), (3, 14), (4, 6)]
                + [(4, 11), (4, 12), (5, 6), (5, 8), (5, 11), (6, 7), (6, 10)]
                + [(6, 11), (7, 11), (7, 12), (9, 13), (11, 13)]
                + [(11, 14), (12, 13)],
            ),
            {
                0: {
                    (0, 3, 2, 8, 6),
                    (0, 5, 11, 6, 7),
                    (0, 5, 11, 6),
                    (0, 2, 8, 6, 7),
                    (0, 2, 3, 6, 7),
                    (0, 3, 6, 11, 5),
                    (0, 1, 9, 12, 3),
                    (0, 3, 6),
                    (0, 1, 9, 10, 6),
                    (0, 5, 11, 10, 6),
                    (0, 1, 5, 11, 6),
                    (0, 2, 4, 8, 6),
                    (0, 3, 6, 7),
                    (0, 2, 8, 6),
                    (0, 2, 3, 6),
                    (0, 3, 12, 10, 6),
                },
                1: {(0, 1, 9, 10, 6), (0, 1, 9, 12, 3), (1, 5, 11, 10, 9)},
                2: {
                    (0, 3, 2, 8, 6),
                    (2, 3, 6, 8, 4),
                    (0, 2, 8, 6, 7),
                    (2, 3, 6, 8),
                    (0, 2, 4, 8, 6),
                    (0, 2, 8, 6, 3),
                    (0, 2, 8, 6),
                },
                3: {
                    (3, 6, 10, 9, 12),
                    (3, 6, 11, 10, 12),
                    (3, 6, 10, 12),
                    (0, 1, 9, 12, 3),
                    (0, 3, 12, 10, 6),
                },
                5: {
                    (0, 5, 11, 6, 7),
                    (0, 3, 6, 11, 5),
                    (1, 5, 11, 10, 9),
                    (0, 5, 11, 10, 6),
                    (0, 1, 5, 11, 6),
                    (0, 5, 11, 6),
                },
                6: {
                    (0, 3, 2, 8, 6),
                    (2, 3, 6, 8, 4),
                    (0, 5, 11, 6, 7),
                    (3, 6, 10, 12),
                    (3, 6, 10, 9, 12),
                    (3, 6, 11, 10, 12),
                    (0, 2, 8, 6, 7),
                    (0, 3, 6, 11, 5),
                    (2, 3, 6, 8),
                    (0, 1, 9, 10, 6),
                    (0, 5, 11, 10, 6),
                    (0, 1, 5, 11, 6),
                    (0, 2, 4, 8, 6),
                    (0, 5, 11, 6),
                    (0, 2, 8, 6, 3),
                    (0, 2, 8, 6),
                    (0, 3, 12, 10, 6),
                },
                8: {
                    (0, 2, 4, 8, 6),
                    (0, 3, 2, 8, 6),
                    (2, 3, 6, 8, 4),
                    (2, 3, 6, 8),
                    (0, 2, 8, 6, 7),
                    (0, 2, 8, 6, 3),
                    (0, 2, 8, 6),
                },
                9: {(0, 1, 9, 10, 6), (0, 1, 9, 12, 3), (1, 5, 11, 10, 9)},
                10: {
                    (3, 6, 10, 12),
                    (3, 6, 10, 9, 12),
                    (3, 6, 11, 10, 12),
                    (1, 5, 11, 10, 9),
                    (0, 1, 9, 10, 6),
                    (0, 3, 12, 10, 6),
                },
                11: {
                    (0, 5, 11, 6, 7),
                    (0, 3, 6, 11, 5),
                    (1, 5, 11, 10, 9),
                    (0, 5, 11, 10, 6),
                    (0, 1, 5, 11, 6),
                    (0, 5, 11, 6),
                },
                12: {
                    (3, 6, 10, 12),
                    (3, 6, 11, 10, 12),
                    (3, 6, 10, 9, 12),
                    (0, 1, 9, 12, 3),
                    (0, 3, 12, 10, 6),
                },
            },
        ),
    ],
    ids=[
        "path",
        "cycle3",
        "cycle4",
        "cycle5",
        "diamond",
        "prism",
        "prismPlus",
        "minimallyRigid",
        "smaller_problemist",
        "large_problemist",
        "anoying_problemist",
    ],
)
def test_find_cycles(graph: nx.Graph, result: dict[int, set[tuple[int, ...]]]):
    _, class_to_edges = nac.find_mono_classes(graph)
    class_to_edges = cast(list[list[tuple[int, int]]], class_to_edges)

    res = _find_useful_cycles_for_class(
        graph,
        list(range(len(class_to_edges))),
        class_to_edges,
        per_class_limit=1024,
    )
    assert res == result
